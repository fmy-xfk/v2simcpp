from typing import Callable, List, Tuple, Union, overload
import enum

class V2SimError(Exception):
    def __init__(self, msg: str) -> None: ...
    def what(self) -> str: ...

class RangeList:
    @overload
    def __init__(self, always: bool = False) -> None: ...
    @overload
    def __init__(self, d: List[Tuple[int, int]], period: int = 0, times: int = 1) -> None: ...
    def __contains__(self, time: int) -> bool: ...
    def SetForce(self, b: bool) -> None: ...
    def ClearForce(self) -> None: ...
    def __len__(self) -> int: ...

class SegFunc:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, timelist: List[int], data: List[float], period: int = 0, times: int = 1) -> None: ...
    @overload
    def __init__(self, d: List[Tuple[int, float]], period: int = 0, times: int = 1) -> None: ...
    def __len__(self) -> int: ...
    def GetPeriod(self) -> int: ...
    def GetRepeatTimes(self) -> int: ...
    def Get(self, time: int) -> float: ...
    def Add(self, time: int, data: float) -> None: ...
    def __call__(self, time: int) -> float: ...
    def SetOverride(self, val: float) -> None: ...
    def ClearOverride(self) -> None: ...
    def GetOverride(self) -> float: ...
    def __neg__(self) -> 'SegFunc': ...
    def __mul__(self, d0: float) -> 'SegFunc': ...
    def Expand(self) -> 'SegFunc': ...
    def SelfExpand(self) -> None: ...
    def TimeLine(self, i: int) -> int: ...
    def Data(self, i: int) -> float: ...

class Point:
    x: float
    y: float
    label: int
    def __init__(self, x: float = 0, y: float = 0, label: int = 0) -> None: ...
    def dist_to(self, other: 'Point') -> float: ...

class KDTree:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, points: List[Point]) -> None: ...
    def Init(self, points: List[Point]) -> None: ...
    def findNearestNeighbor(self, target: Point) -> Point: ...
    def findKNearestNeighbors(self, target: Point, k: int) -> List[Point]: ...

class VehStatus(enum.IntEnum):
    Driving = 0
    Pending = 1
    Charging = 2
    Parking = 3
    Depleted = 4

class Trip:
    ID: str
    DepartTime: int
    FromTAZ: str
    ToTAZ: str
    FixedRoute: bool
    def __init__(self, id: str, dpt_time: int, fTAZ: str, tTAZ: str, route: Union[List[str], str], 
                 auto_detect_fixed_route: bool = True, fixed_route: bool = False) -> None: ...
    def Route(self) -> List[str]: ...
    def FromEdge(self) -> str: ...
    def ToEdge(self) -> str: ...
    def __repr__(self) -> str: ...

BattCorrFunc = Callable[
    [float, float, float],
    float
]

class BattCorrFuncPool:
    @staticmethod
    def Add(id: str, bcf: BattCorrFunc) -> None: ...
    @staticmethod
    def Get(id: str) -> BattCorrFunc: ...

# V2GAlloc = Callable[
#     [EVMap, List[int], float, int, float],
#     List[float]
# ]

# class V2GAllocPool:
#     @staticmethod
#     def Add(id: str, v2galloc: V2GAlloc) -> None: ...
#     @staticmethod
#     def Get(id: str) -> V2GAlloc: ...

class V2SimInterface:
    def __init__(self, start_time: int, end_time: int, step_length: int,
        roadnet: str, ev_file: str, fcs_file: str, scs_file: str, output_dir: str,
        log_fcs: bool = True, log_scs:bool = True, log_ev:bool = False) -> None: ...
    def getTime(self) -> int: ...
    def getStartTime(self) -> int: ...
    def getEndTime(self) -> int: ...
    def getStepLength(self) -> int: ...
    def Start(self) -> None: ...
    def Step(self, len: int = -1) -> None: ...
    def Stop(self) -> None: ...